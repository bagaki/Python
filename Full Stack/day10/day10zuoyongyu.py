# 命名空间和作用域


# 命名空间

# 内置民命空间 --- python解释器
#    就是python解释器，启动就可以使用的名字存储在内置命名空间中
#    内置的名字在启动解释器的时候就加载进内存里

# 全局命名空间 --- 我们写的代码但不是函数中的代码
#    是在程序从上到下被执行的过程中依次加载进内存的
#    放置了我们设置的所有变量名和函数名

# 局部命名空间 --- 函数
#    就是函数内部定义的名字
#    当调用函数的时候才会产生这个名称空间，随着函数执行的结束，这个命名空间就又消失了

# 在局部：可以使用全局，内置命名空间中的名字
# 在全局：可以使用内置命名空间中的名字，但是不能局部中使用

# 在正常情况下，直接使用内置的名字
# 当我们在全局定义了和内置名字空间中同名的名字时，会使用全局的名字
# 当我自己又的时候，就不找上级
# 如果自己没有，就找上级
# 如果自己没有就找上一级，上一级没有再找上一级，如果内置的名字空间都没有就报错
# 第一个函数应该拥有多个独立的局部名字空间，不互相共享


# 作用域

# 全局作用域 -- 作用在全局 -- 内置和全局名字空间中的名字都属于全局作用域
# 局部作用域 -- 作用在局部 -- 内置和全局名字空间中的名字都属于局部作用域

a = 1
def func():
	global a
	a += 1

# 对于不可变数据类型，在局部可以查看全局作用域中的变量
# 但不能直接修改
# 如果想要修改，需要在程序的一开始添加global声明
# 如果在一个局部函数内声明了一个global变量，那么这个变量在局部的所有才做将对全局有效


# ####################闭包######################
# 闭包：嵌套函数，内部函数调用外部函数的变量
# 默写！！！！
def outer():
	a = 1
	def inner():
		print(a)    # 必须又这个
	return inner

inn = outer()
inn()


from urllib.request import urlopen
def get_url():
	url = 'http://www.xiaohua100.cn/index.html'
	def get():
		ret = urlopen(url).read()
		print(ret)
	retrun get

get_func = get_url()
get_func()


#############作业################
# 2、写函数，接收n个数字，求这些参数数字的和
def sum_func(*args):
	total = 0
	for i in *args:
		total += i
	return total

# 3、看代码，打印出来的值a,b,c是什么，why
a = 10
b = 20
def test5(a, b):
	print(a,b)
c = test5(b,a)
print(c)

# 4、
a = 10
b = 20
def test6(a, b):
	a = 3
	b = 5
	print(a,b)
c = test6(b,a)
print(c)
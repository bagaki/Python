1、数据库是什么
2、MySQL安装
3、用户授权
4、
    数据库操作
    数据表
        数据类型
        是否可以为空
        自增
        主键
        外键
            一对多
            多对多
            一对一
        唯一索引（可以为空）

    数据行
        增
        删
        改
        查
            排序：order by desc/asc
            分组：group by
            条件：where
            链表：
                left join    on
                right join
                inner join
            临时表
            通配符
            分页：limit
            组合：union
    视图（虚拟表）
    触发器
    函数： select xx(f)
    存储过程：
        游标
        事务
        结果集 + “返回值”
    pymusql
        连接 connect(...)
        操作（游标）
            增删改 --> commit
            查     --> fetchone, fetchall
            SQL注入
                select * from user where username='x' and pwd='sad'
                select * from user where username='x' or 1=1 -- ' and pwd='asd'
            调用存储过程
                callproc('p1', 参数)
                select @_p1_0
        关闭游标
        关闭连接

--------------------------------------------------------------------------------------------------

1、索引
    作用：
        约束
        加速查找
    索引：
        普通索引：加速查找
        主键索引：加速查找，约束，不能为空和重复，唯一
        唯一索引：加速查找 + 不能重复
        联合索引（联合唯一）（多列）：
            联合主键索引
            联合唯一索引
            联合普通索引

    加速查找：
         select * from tb where name='asd';
         select * from tb where id=999;

         无索引：从前到后一次查找
         索引：
             id 创建额外的文件（某种格式存储）
             name 创建额外的文件（某种格式存储）
             email 创建额外的文件（某种格式存储）
             name email 创建额外的文件（某种格式存储）

         索引种类：
             hash索引：索引表
                 单值  快
                 范围
             btree索引
                 二叉树


        创建索引：
             额外的文件保存特殊的数据结构
             查询快，插入或更新或删除慢
             命中索引
                  select * from userinfo3 where email='asaf';
                  select * from userinfo3 where email like 'asaf';

             普通索引：
                 create index 索引名称 on 表名(列名);
                 create index ix_name on userinfo3(email);
                 drop index 索引名称 on 表名;

             唯一索引：
                  create unique index 索引名称 on 表名(列名);
                  drop unique index 索引名称 on 表名;

             联合索引：
                  create unique index 索引名称 on 表名(列名, 列名);
                  drop unique index 索引名称 on 表名;

                  create index ix_name_email on userinfo3(name, email)
                  最左前缀匹配
                      select * from userinfo3 where name='alex'
                      select * from userinfo3 where name='alex' and email='alex3714'

                      select * from userinfo3 where email='alex3714'

                  组合索引效率 > 索引合并
                  组合索引：
                       select * from userinfo3 where name='alex' and email='alex3714'
                  索引合并：
                       select * from userinfo3 where name='alex'
                       select * from userinfo3 where name='alex' and email='alex3714'
                       select * from userinfo3 where email='alex3714'

             覆盖索引（名词）
                  在索引文件中直接获取数据

             索引合并
                  多个单列索引合并起来

2、频繁查找的列创建索引
    创建索引
    命中索引

        like '%xx'
            select * from tb1 where name like '%cn';

       函数
            select * from tb1 where reverse(name) = 'skshd';

       or

       类型不一致

       !=

       >

       order by

       组合索引最左前缀
           name and email   -- 使用索引
           name             -- 使用索引
           email            -- 不使用索引


3、时间
    参考时间

    执行计划：让MySQL预估执行操作（一般正确）
        all < index < range < index_merge < ref_or_null < ref < eq_ref < system/const
    explain select * from userinfo3 where name='alex';

    慢：
        select * from userinfo3 where name='alex';
        explain select * from userinfo3 where name='alex';
        type:ALL（全表扫描）

    快：
        select * from userinfo3 where email='alex';
        explain select * from userinfo3 where email='alex';
        type:ref（走索引）


4、DBA工作
    慢日志
         执行时间 > 10
         未命中索引
         日志文件路径


    配置：
         内存：show variables like '%query%';
         启动慢日志：set global slow_query_log=ON;
         配置文件：(my.conf)
             mysqld -- defaults-file='配置文件的路径'

             my.conf内容:
                 slow_query_log = ON
                 slow_query_log_file = 'D:/...'

             注意：修改配置文件之前要备份，修改之后，需要重启服务

*************************************************************************

5、分页
    select * from userinfo3 limit 20,10;
    解决方案
         不让看
         索引表中扫描：
              select * from userinfo3 where id in(
              select id from userinfo3 limit 2000,10;)
         真正方案：
              记录当前页最大或最小ID
              1、页面中有上一页，下一页
                   max_id
                   min_id
                   下一页：
                        select * from userinfo3 where id > max_id limit 10;
                   上一页：
                        select * from userinfo3 where id < min_id order by desc limit 10;
              2、上一页 192 193 194 195 下一页
                  select * from userinfo3 where id in(
                        select id from (select id from userinfo3 where id > max_id limit 30) as N order by N.id desc limit 10)
                  )

         id不连续，所以无法直接使用id范围进行查找


二、ORM框架 - SQLAlchemy
    用类和对象对数据库操作
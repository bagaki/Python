1、常用字符串格式化有哪些？并说明他们的区别
    format()：直接调用函数；  %s：语法糖；  %r

2、请写出【元组、列表、字典、集合】的定义方法、新增方法更改方法、删除方法
    元组：由一系列元素组成，所以元素被包含在一对圆括号中()，各元素用 , 分开。
           元组一旦创建后不能添加和修改任何元素
    列表：列表中的所有元素都被包含在[]中，创建之后可以执行添加或删除
          添加：append() extend() insert()  删除：remove() pop() 更改：list[0] = 'me'
    字典：由{"键":"值"}对组成的集合，字典中的"值"通过键来引用
          添加和修改：dic['keys'] = "value"
          删除：del()  pop（k[, d]）  弹出索引为k的值，如果存在索引k，则返回值为键值对应的value,如果不存在，还回为d
                 clear()清空一个字典
    mun = {1,2,3,4,5}     集合中的元素唯一，不能索引

3、利用python打印前一天的本地时间，格式为‘2018-01-30’（面试题）
    时间戳时间 - （60*60*24）  转换成strftime

4、python中search()和match()的区别（面试题）
    相同点:接收两个参数，正则表达式，带匹配的字符串
            只匹配一个符合条件的项
    区别：search根据所写的正则匹配符合条件的第一个
          match根据缩写的正则，从头开始匹配，相当于在正则表达式的开始位置加了一个^
     hello
     search :只要句中有hello就能匹配  aaaabbhellosss
     match :只有句首有hello才能匹配上  helloaaasssbb

5、什么时lambda函数，有什么好处
    匿名函数
    简洁明了，可以和内置函数合用，有效减少冗余的代码

6、说明__init__和__new__的作用
    ___init__是初始化方法 self
    __new__ 是构造方法 cls 创建对象，先执行于__init__
    __del__ 是析构方法 删除一个对象之前执行的方法

7、简述反射式怎么回事  (面试)
    用字符串数据类型的变量名或函数名来调用对应的属性
    A.b   getattr(A, 'b')

8、解释python中深拷贝和浅拷贝的区别
    深copy，不管一个数据类型有多少层，都另外开辟新空间来存储一份和原来一模一样的数据
    浅copy，只是重新开辟一块空间来copy第一层的数据

9、用最简介的方式生成这样一个列表[4, 8, 16, 32, 64, 128]
    l = []
    for i in range(2,8):
        if i != 3:
            l.append(2**i)  # l.append(pow(2,3))

10、python中如何实现随机数并打印，默认的随机数范围是多少
    random.random()  0-1

11、新式类和经典类的区别
    新式类：默认继承object，在继承的过程中，寻找一个方法，遵循广度优先，内置mro方法来标识广度优先的顺寻
    经典类：在继承的过程中，寻找一个方法，遵循深度优先

12、装饰器什么时候被执行
    被装饰的函数调用的时候
    加载函数的时候被执行

13、什么是并发？什么是并行？
    并发：多线程，看起来一起执行，GIL在同一时刻限制了多个线程只能有一个线程被CPU执行（在同一时间，只能有一个CPU在处理任务）
    并行：多进程，多个进程在同一时刻可以占用多个CPU（是真正意义上的，在同一时刻有多个CPU在处理任务）

14、以个人理解描述Event的执行原理
    有一个状态控制wait方法是否阻塞

15、什么是黏包，如何处理
    TCP协议：面向连接的流传输，数据是无边界的
    如何避免：自定义协议struct模块（把不管是多大的数字，转换为4个字节的bytes类型，在两边通讯，带上数据大小的头，先读取四个字节）
    UDP协议：没有黏包现象，是基于数据包的，界限是清晰

16、什么是进程
    运行中的程序
    是最小的资源分配单位
    为多个任务之间的数据安全和内存隔离做约束

17、什么是线程
    CPU调度的最小单位
    轻量级的进程
    是进程的一部分
    可以共享进程中的数据

18、简述你对管道、队列的理解
    管道：双向通信的数据容器，多进程的IPC中用到了
          数据不安全
    队列：先进先出，基于管道和锁实现的一个数据在线程、进程之间安全的容器

19、编程题：写一个装饰器实现功能：打印程序的运行时间
    import time
    def timmer(func):
        def inner():
            start = time.time()
            ret = func(*args, **kwargs)
            print(time.time() - start)
            return ret
        return inner

     @timmer
     def wahaha():
         pass

20、读一下代码，写出答案并简述原因（面试题建议不是电脑）
    def f(x, l = []):        # 2;             3 ;              3 [0,1]
            l.append(i*i)    # [0, 1]   ;     [3,2,1,0,1,4]    [0,1,0,1,4]
        print l              # [0,1]          [3,2,1,0,1,4]    [0,1,0,1,4]

     f(2)
     f(3,[3,2,1])
     f(3)

21、使用python简单实现打印九九乘法表

22、简述python GIL的概念，以及它对python多线程的影响
    GIL：全局解释器锁，属于Cpython解释器，用来在Cpython解释器解释一段多线程代码时，约束线程在同一时刻，只能有一个线程访问CPU
    影响：导致在Cpython解释器下启动多线程并不能真正实现并行

23、写一个单利模式
    （进阶博客里有）

24、编程题：将一下list3的格式转换成list4格式
list3 = [
    {"name":"alex", "hobby":"抽烟"},
    {"name":"alex", "hobby":"喝酒"},
    {"name":"alex", "hobby":"烫头"},
    {"name":"alex", "hobby":"Massage"},
    {"name":"egon", "hobby":"喊麦"},
    {"name":"egon", "hobby":"街舞"},
]

如何把上卖弄的俩表转换成下方的列表
list4 = [
    {"name":"alex", "hobby_list":["抽烟", "喝酒", "烫头", "Massage"]},
    {"name":"egon","hobby_list":["喊麦", "街舞"]},
]
# mo'xie
list4 = []
for item in list3:
     for dic in list4:
         if item["name"] == dic["name"]:
             dic["hobby_list"].append(item["hobby"])
             break
     else:
         list4.append({"name":item["name"],"hobby_list":[item["hobby"]]})
print(list4)

25、编程题
"""
一、定义一个学生类，有下面的类属性：
姓名
年龄
成绩（语文、数字、英语）[每课成绩的类型为整数]
类方法：
获取学生的姓名：get_name() 返回类型：str
获取学生的年龄：get_age() 返回类型：int
返回3门科目中最高的分数。get_course() 返回类型：int
写好类以后，可以定义2个同学测试下：
zm = Student('tomoya', 40, [69, 88, 100])
返回结果：
tomoya
40
100
"""

26、写一个socket客户端和服务端并进行通讯

27、什么是异步，什么时是步阻塞
    在同一时刻可以同时做两件事，异步阻塞，在同一时刻各自的线程或进程中存在I/O操作
    t.start()  # 异步
    print(123)

    t.start()
    t.join()  # 同步
    print(123)


28、写一个程序，包含十个线程，子线程必须等待主线程sleep
    from threading import Timer

    def func():pass
    for i in range(10):
        Timer(10, func).start()

29、你所了解的锁都有哪些
    互斥锁，在同一个线程或者进程之间，当有两个acquire的时候，就会产生阻塞，死锁
    递归锁：在同一个线程或者进程之间，无论acquire多少次，都不会产生阻塞

30、threading.RLock和threading.Lock的区别
    互斥锁，在同一个线程或者进程之间，当有两个acquire的时候，就会产生阻塞，死锁
    递归锁：在同一个线程或者进程之间，无论acquire多少次，都不会产生阻塞